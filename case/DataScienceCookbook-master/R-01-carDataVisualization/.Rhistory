1+1
1+1
2+3
3*82
2*3
print("hello, R!  ")
print("hello, R!  ")
c
print("hello, R!")
murders %>%
ggplot(aes(population, total, label=abb, color=region)) +
geom_label()
murders %>%
ggplot(aes(population, total, label=abb, color=region)) +
geom_label()
source("D:/MY_EARTH/Z-code/Data-Science/first-r-script.R")
source("D:/MY_EARTH/Z-code/Data-Science/first-r-script.R")
source("D:/MY_EARTH/Z-code/Data-Science/first-r-script.R")
murders %>%
ggplot(aes(population, total, label=abb, color=region)) +
geom_label()
View(murders)
print("hello, R!")
print("hello, R!")
source("D:/MY_EARTH/Z-code/Data-Science/test.r")
ls()
a
a<1
b<1
c<1
a<-1
b<-1
c<-1
c <- -1
ls()
(-b+sqrt(b^2 - 4*a*c))/2*a
(-b - sqrt(b^2 - 4*a*c))/2*a
log()
log(1)
log(exp(1))
?log
help("+")
murders %>%
ggplot(aes(population, total, label=abb, color=region))
source("D:/MY_EARTH/Z-code/Data-Science/first-r-script.R")
geom_label()
source("D:/MY_EARTH/Z-code/Data-Science/first-r-script.R")
source("D:/MY_EARTH/Z-code/Data-Science/first-r-script.R")
geom_label()
source("D:/MY_EARTH/Z-code/Data-Science/first-r-script.R")
source("D:/MY_EARTH/Z-code/Data-Science/first-r-script.R")
source("D:/MY_EARTH/Z-code/Data-Science/first-r-script.R")
geom_label()  # nolint
v <- c(2,4,6,9)
t <- c(1,4,7,9)
print(v>t)
print(v < t)
print(v == t)
print(v!=t)
print(v>=t)
print(v<=t)
print(1:10)
a=c(3,4)
b=c(5,0)
a+b
c=c(3,3,4)
b+c
a[2]
t[2:4]
x <- 50L
if(is.integer(x)) {
print("X 是一个整数")
}
x <- 50L
if(is.integer(x)) {
print("X 是一个整数")
}
View(murders)
View(murders)
View(murders)
View(murders)
View(murders)
View(murders)
View(murders)
x <- 50
if(is.integer(x)) {
print("X 是一个整数")
}
x <- 50
if(is.integer(x)) {
print("X 是一个整数")
}
x <- 50L
if(is.integer(x)) {
print("X 是一个整数")
}
x = 50L
if(is.integer(x)) {
print("X 是一个整数")
}
x = 50S
if(is.integer(x)) {
print("X 是一个整数")
}
x <- c("google","runoob","taobao")
if (runoob %in% x) {
print("包含 runoob")
} else {
print("不包含 runoob")
}
class(ls)
class(a)
class(x)
View(murders)
View(murders)
head(murders)
levels(murders$state)
levels(murders$region)
levels(murders$total)
class(murders$state)
class(muders$region)
class(murders$region)
class(murders$abb)
class(murders$population)
a=2
b=-1
c=-4
(-b+(sqrt(b^2-4*a*c))/2*a)
(-b-(sqrt(b^2-4*a*c))/2*a)
log2(1024)
log4(1024)
log(1024, base=4)
library(dslabs)
package(dslabs)
library(dslabs)
data(movielens)
source("D:/MY_EARTH/Z-code/Data-Science/movielens-dslabs.R")
data(movielens)
View(movielens)
class(movielens$title)
nlevels((movielens$genres))
source("D:/MY_EARTH/Z-code/Data-Science/plots-learning.R", encoding = 'UTF-8')
# 绘图
pie(info, labels=names, col=cols)
source("D:/MY_EARTH/Z-code/Data-Science/plots-learning.R", encoding = 'UTF-8')
# 绘图
pie(info, labels=names, col=cols)
source("D:/MY_EARTH/Z-code/Data-Science/2.Visualization/Exercise 2. Variable type.R")
source("D:/MY_EARTH/Z-code/Data-Science/2.Visualization/Exercise 2. Variable type.R")
source("D:/MY_EARTH/Z-code/Data-Science/2.Visualization/Exercise 2. Variable type.R")
source("D:/MY_EARTH/Z-code/Data-Science/2.Visualization/Exercise 2. Variable type.R")
source("D:/MY_EARTH/Z-code/Data-Science/2.Visualization/Exercise 2. Variable type.R")
source("D:/MY_EARTH/Z-code/Data-Science/2.Visualization/Exercise 2. Variable type.R")
head(heights)
head(heights)
head(heights)
head(heights)
source("D:/MY_EARTH/Z-code/Data-Science/2.Visualization/chapter 1/Exercise 3. Numerical values.R", encoding = 'UTF-8')
length(unique(x)) #unique(x)输出这个dataset的全部不重复的数据 #length(X)输出x共有多少个数据
source("D:/MY_EARTH/Z-code/Data-Science/2.Visualization/chapter 2/Exercise 1. Vector lengths.R")
source("D:/MY_EARTH/Z-code/Data-Science/2.Visualization/chapter 2/Exercise 2. Percentiles.R")
quantile(heights$height, seq(.01, 0.99, 0.01))
source("D:/MY_EARTH/Z-code/Data-Science/2.Visualization/chapter 2/Exercise 2. Percentiles.R")
df
source("D:/MY_EARTH/Z-code/Data-Science/2.Visualization/chapter 2/Exercise 2. Percentiles.R", encoding = 'UTF-8')
# quantile()R語言中的函數用於在概率[0, 1]的數據集中創建樣本分位數。例如第一個分位數為 0.25[25%]，第二個為 0.50[50%]，第三個為 0.75[75%]。
female_percentiles <- quantile(female, seq(0.1, 0.9, 0.2)) #seq(x,y,z) 生成一组数据，开始于0.1，结束于0.9，间隔0.2
male_percentiles <- quantile(male, seq(0.1, 0.9, 0.2))
df <- data.frame(female = female_percentiles, male = male_percentiles)
df #就是print(df)
source("D:/MY_EARTH/Z-code/Data-Science/2.Visualization/1.2 Introduction to Distributions/Normal Distribution.R", encoding = 'UTF-8')
source("D:/MY_EARTH/Z-code/Data-Science/2.Visualization/1.2 Introduction to Distributions/Normal Distribution.R", encoding = 'UTF-8')
source("D:/MY_EARTH/Z-code/Data-Science/2.Visualization/1.2 Introduction to Distributions/Normal Distribution.R", encoding = 'UTF-8')
source("D:/MY_EARTH/Z-code/Data-Science/2.Visualization/1.2 Introduction to Distributions/Normal Distribution.R", encoding = 'UTF-8')
source("D:/MY_EARTH/Z-code/Data-Science/2.Visualization/1.2 Introduction to Distributions/Normal Distribution.R", encoding = 'UTF-8')
source("D:/MY_EARTH/Z-code/Data-Science/2.Visualization/1.2 Introduction to Distributions/Normal Distribution.R", encoding = 'UTF-8')
#normal distribution: 正态分布
# define x as vector of male heights
library(tidyverse)
library(dslabs)
data(heights)
index <- heights$sex=="Male"
x <- heights$height[index]
# calculate the mean and standard deviation manually
average <- sum(x)/length(x)
SD <- sqrt(sum((x - average)^2)/length(x))
# built-in mean and sd functions - note that the audio and printed values disagree
average <- mean(x)
SD <- sd(x)
c(average = average, SD = SD)
# calculate standard units
z <- scale(x)
# calculate proportion of values within 2 SD of mean
mean(abs(z) < 2)
View(z)
source("D:/MY_EARTH/Z-code/Data-Science/2.Visualization/1.2 Introduction to Distributions/Normal Distribution.R", encoding = 'UTF-8')
# mean()求平均值：https://www.runoob.com/r/r-func-mean.html
# mean()求平均值：https://www.runoob.com/r/r-func-mean.html
#normal distribution: 正态分布
# define x as vector of male heights
library(tidyverse)
library(dslabs)
data(heights)
index <- heights$sex=="Male"
x <- heights$height[index]
# calculate the mean and standard deviation manually
average <- sum(x)/length(x)
SD <- sqrt(sum((x - average)^2)/length(x))
# built-in mean and sd functions - note that the audio and printed values disagree
average <- mean(x)
SD <- sd(x)
c(average = average, SD = SD)
# calculate standard units
z <- scale(x)
# calculate proportion of values within 2 SD of mean
mean(abs(z) < 2) # abs()求绝对值
help(c)
print(z)
# calculate proportion of values within 2 SD of mean
mean(abs(z) < 2) # abs()求绝对值
library(dslabs)
data(heights)
index <- heights$sex=="Male"
x <- heights$height[index]
# calculate the mean and standard deviation manually
average <- sum(x)/length(x)
SD <- sqrt(sum((x - average)^2)/length(x)) #样本差
# built-in mean and sd functions - note that the audio and printed values disagree
average <- mean(x)
SD <- sd(x) #sd()函数用来计算标注差
c(average = average, SD = SD) # c()生成一个向量
# calculate standard units
z <- scale(x)
# calculate proportion of values within 2 SD of mean
mean(abs(z) < 2) # abs()求绝对值
# mean()求平均值：https://www.runoob.com/r/r-func-mean.html
print(z)
c(average = average, SD = SD) # c()生成一个向量
# calculate proportion of values within 2 SD of mean
mean(abs(z) < 2) # abs()求绝对值
help(mean(x<))
help(mean(x)
help(mean(x))
help(mean)
mean(a<2)
lines(x)
curve(x)
curve(x)
curve(y)
curve(y(x))
y <- x^2
curve(y(x))
x <- seq(1, 10, 1)
y <- x^2
curve(y(x))
curve(y)
curve(sin, -2*pi, 2*pi)
curve(sin, -2*pi, 2*pi)
curve(arctan, -2*pi, 2*pi)
curve(arcsin, -2*pi, 2*pi)
curve(x^2, -2*pi, 2*pi)
curve(tan, -2*pi, 2*pi)
curve(x^3, -2*pi, 2*pi)
curve(sec_axis(), -2*pi, 2*pi)
curve(sec, -2*pi, 2*pi)
# calculate proportion of values within 2 SD of mean
mean(abs(z) < 3) # abs()求绝对值,但小于2每看懂？
mean(a < 2)
mean(a < 10)
mean(a)
mean(a < 10)
?mean(a<10)
?mean
# calculate proportion of values within 2 SD of mean
abs(z)<2
# built-in mean and sd functions - note that the audio and printed values disagree
average <- mean(x)
# built-in mean and sd functions - note that the audio and printed values disagree
average <- mean(x)
exp(2)
source("D:/MY_EARTH/Z-code/Data-Science/2.Visualization/1.2 Introduction to Distributions/UntitledR.R", encoding = 'UTF-8')
source("D:/MY_EARTH/Z-code/Data-Science/2.Visualization/1.2 Introduction to Distributions/UntitledR.R", encoding = 'UTF-8')
library(plyr)
library(reshape2)
install.packages("plyr")
install.packages("ggplot2")
install.packages("reshape2")
install.packages("reshape2")
list()
library()
source("D:/MY_EARTH/Z-code/Data-Science/2.Visualization/1.2 Introduction to Distributions/UntitledR.R", encoding = 'UTF-8')
source("D:/MY_EARTH/Z-code/Data-Science/DataScienceCookbook-master/R-01-carDataVisualization/carDataVisualization.r", encoding = 'UTF-8')
source("D:/MY_EARTH/Z-code/Data-Science/DataScienceCookbook-master/R-01-carDataVisualization/carDataVisualization.r", encoding = 'UTF-8')
#将文件夹拖进终端中即可
setwd("D:\MY_EARTH\Z-code\Data-Science\DataScienceCookbook-master\R-01-carDataVisualization")
source("D:/MY_EARTH/Z-code/Data-Science/DataScienceCookbook-master/R-01-carDataVisualization/carDataVisualization.r", encoding = 'UTF-8')
source("D:/MY_EARTH/Z-code/Data-Science/DataScienceCookbook-master/R-01-carDataVisualization/carDataVisualization.r", encoding = 'UTF-8')
source("D:/MY_EARTH/Z-code/Data-Science/DataScienceCookbook-master/R-01-carDataVisualization/carDataVisualization.r", encoding = 'UTF-8')
source("D:/MY_EARTH/Z-code/Data-Science/DataScienceCookbook-master/R-01-carDataVisualization/carDataVisualizaton-redo.r", encoding = 'UTF-8')
source("D:/MY_EARTH/Z-code/Data-Science/DataScienceCookbook-master/R-01-carDataVisualization/carDataVisualizaton-redo.r", encoding = 'UTF-8')
source("D:/MY_EARTH/Z-code/Data-Science/DataScienceCookbook-master/R-01-carDataVisualization/carDataVisualizaton-redo.r", encoding = 'UTF-8')
source("D:/MY_EARTH/Z-code/Data-Science/DataScienceCookbook-master/R-01-carDataVisualization/carDataVisualizaton-redo.r", encoding = 'UTF-8')
source("D:/MY_EARTH/Z-code/Data-Science/DataScienceCookbook-master/R-01-carDataVisualization/carDataVisualization.r", encoding = 'UTF-8')
source("D:/MY_EARTH/Z-code/Data-Science/DataScienceCookbook-master/R-01-carDataVisualization/carDataVisualization.r", encoding = 'UTF-8')
source("D:/MY_EARTH/Z-code/Data-Science/DataScienceCookbook-master/R-01-carDataVisualization/carDataVisualization.r", encoding = 'UTF-8')
